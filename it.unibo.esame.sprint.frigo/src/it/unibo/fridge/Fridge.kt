/* Generated by AN DISI Unibo */ 
package it.unibo.fridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('fridgeModel.pl')","") //set resVar	
						solve("consult('presenza.pl')","") //set resVar	
						solve("consult('spostaEsterno.pl')","") //set resVar	
						solve("showResourceModel","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="exposeModel",cond=whenDispatch("exposeFood"))
					transition(edgeName="t03",targetState="changeInventory",cond=whenDispatch("changeInventory"))
					transition(edgeName="t04",targetState="replyQuery",cond=whenDispatch("queryPresence"))
				}	 
				state("changeInventory") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("changeInventory(OPERATION,CATEGORY,NAME)"), Term.createTerm("changeInventory(OPERATION,CATEGORY,NAME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("spostaEsterno(${payloadArg(2)},${payloadArg(1)},frigo,${payloadArg(0)})","") //set resVar	
								solve("showResourceModel","") //set resVar	
								itunibo.fridge.fridgeResourceModelSupport.exposeFridgeModel(myself)
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("replyQuery") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("queryPresence(CATEGORY,NAME)"), Term.createTerm("queryPresence(CATEGORY,NAME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								storeCurrentMessageForReply()
								solve("presenza(${payloadArg(1)},cibo,frigo)","") //set resVar	
								if(currentSolution.isSuccess()) { replyToCaller("replyPresence", "replyPresence(present)")
								 }
								else
								{ replyToCaller("replyPresence", "replyPresence(absent)")
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("exposeModel") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.fridge.fridgeResourceModelSupport.exposeFridgeModel(myself)
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
